{"version":3,"sources":["components/view.tsx","components/loading.tsx","apis/request.ts","hooks/useFetch.ts","apis/useGroupedDataFetch.ts","styles/mapBoxCircleStyles.ts","keys.ts","components/map.tsx","hooks/useMapBoxState.ts","apis/useGeoLocationFetch.ts","apis/useIpInfoFetch.ts","components/stats.tsx","components/ipinfoContainer.tsx","components/locationContainer.tsx","dashboard.tsx","App.tsx","index.tsx"],"names":["styledSystemProps","typography","space","layout","color","position","flexbox","grid","background","borders","boxShadow","View","React","forwardRef","props","ref","ViewRoot","children","styled","aboveMap","css","zIndex","Flexbox","display","Loading","Dimmer","active","Loader","handleError","error","response","status","message","original","getRequest","option","a","url","params","axios","get","data","useFetch","request","options","useState","fetching","setFetching","fetched","setFetched","setData","setError","onComplete","onFailure","doFetch","useCallback","useEffect","notImmediate","useGroupedDataFetch","group","fetchGroupedData","groupToCircleStyle","country","region","city","mapboxgl","accessToken","keys","Map","memo","lng","lat","zoom","groupToSwitchRefs","mostRecentIpRefs","mostRecentIpInfo","setMapBoxState","setClickedCircleFetchParam","setStats","mapContainer","useRef","countryFetched","countryError","regionFetched","regionError","cityFetched","cityError","allFetched","map","container","current","style","center","groups","on","forEach","addSource","type","cluster","clusterMaxZoom","addLayer","id","source","paint","addEventListener","e","hideAllLayOuts","setLayoutProperty","features","properties","setTimeout","click","i","length","console","parseFloat","loc","split","flyTo","essential","lngLat","parseInt","getZoom","toFixed","totalVisits","count","countTotalVisits","numOfCountries","numOfRegions","numOfCities","lastVisitedTime","visits","time","className","top","right","left","bottom","height","width","el","defaultMapState","useMapBoxState","mapBoxState","fetchGeoLocation","format","ipData","ip","access_key","geoData","useGeoLocationFetch","latitude","longitude","useIpInfoFetch","fetchedIpInfo","log","sort","size","Stats","fontSize","window","outerWidth","lineHeight","m","href","Icon","name","Statistic","Group","inverted","widths","mt","Value","Label","IpInfoContainer","flexDirection","px","overflowY","backgroundColor","key","ipinfo","Button","animated","Content","hidden","visible","IpInfoItem","_id","hostname","org","timezone","lastVisitTime","month","date","imageUrl","justifyContent","py","marginBottom","my","src","alt","Elem","alignItems","Line","border","LocationContainer","p","Dashboard","displayMode","setDisplayMode","clickedCircleFetchParam","stats","fetchedMostRecntIpInfo","fetchedCircleIpInfo","circleIpInfo","fetchedMapBoxState","switchToCountryRef","switchToRegionRef","switchToCityRef","Object","Segment","fontWeight","pt","onClick","switchRef","SwitchGroupButton","App","ReactDOM","render","document","getElementById"],"mappings":"mOAqCMA,EAAoB,CACxBC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAMWC,EAAOC,IAAMC,YACxB,SAACC,EAAkBC,GACjB,OAAO,kBAACC,EAAaF,EAAQA,EAAMG,aAIjCD,EAAWE,YAAO,MAAPA,EACf,SAACJ,GAAD,OACEA,EAAMK,SAAWC,YAAI,CAAEC,OAAQ,cAAehB,SAAU,aAAgB,KAC1EL,GAGWsB,EAAyB,SAACR,GACrC,OACE,kBAACH,EAAD,eAAMY,QAAQ,QAAWT,GACtBA,EAAMG,W,0BCjEAO,EAA2B,SAAC,GAA4B,IAA1BP,EAAyB,EAAzBA,SAAaH,EAAY,4BAClE,OACE,kBAACW,EAAA,EAAD,CAAQC,QAAM,GACZ,kBAACC,EAAA,EAAWb,EAAQG,K,4DCKpBW,EAAc,SAACC,GACnB,IAAKA,EAAMC,WAAaD,EAAMC,SAASC,OACrC,MAAO,CAAEC,QAAS,gCAAiCC,SAAUJ,GAK/D,MAAO,CACLG,QAHS,2CAITC,SAAUJ,IAIDK,EAAU,uCAAG,WACxBC,GADwB,mBAAAC,EAAA,6DAGhBC,EAAgBF,EAAhBE,IAAKC,EAAWH,EAAXG,OAHW,kBAKCC,IAAMC,IAAUH,EAAK,CAAEC,WALxB,cAKhBR,EALgB,yBAMf,CAAEW,KAAMX,EAASW,KAAMV,OAAQD,EAASC,SANzB,sCAQhBH,EAAY,EAAD,IARK,yDAAH,sDClBVc,EAAW,SACtBC,EACAC,GACI,IAAD,EAC6BC,oBAAkB,GAD/C,mBACIC,EADJ,KACcC,EADd,OAE2BF,oBAAkB,GAF7C,mBAEIG,EAFJ,KAEaC,EAFb,OAGqBJ,mBAAsB,MAH3C,mBAGIJ,EAHJ,KAGUS,EAHV,OAIuBL,mBAAqB,MAJ5C,mBAIIhB,EAJJ,KAIWsB,EAJX,KAKGC,EAAU,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAASQ,WACtBC,EAAS,OAAGT,QAAH,IAAGA,OAAH,EAAGA,EAASS,UAErBC,EAAUC,sBAAW,sBAAC,4BAAAnB,EAAA,6DAC1Be,EAAS,MACTD,EAAQ,MACRH,GAAY,GAHc,kBAKLJ,IALK,OAKlBF,EALkB,OAMxBS,EAAQT,GACRQ,GAAW,GACXF,GAAY,GACRK,GAAYA,EAAWX,GATH,kDAWxBU,EAAS,EAAD,IACRJ,GAAY,GACRM,GAAWA,EAAU,EAAD,IAbA,0DAezB,CAACD,EAAYC,EAAWV,IAO3B,OALAa,qBAAU,WACJZ,GAAWA,EAAQa,cACvBH,MACC,CAACA,EAASV,IAEN,CAAEE,WAAUE,UAASM,UAASb,OAAMZ,UChChC6B,EAAsB,SACjCC,EACAxB,GAEA,IAAMyB,EAAmBL,sBAAW,sBAAC,8BAAAnB,EAAA,sEACZF,EAErB,CACAG,IAAI,4BAAD,OAA8BsB,KAJA,uBAC3BlB,EAD2B,EAC3BA,KAD2B,kBAM5BA,GAN4B,2CAOlC,CAACkB,IACJ,OAAOjB,EACLkB,EACAzB,ICpBS0B,EAAsC,CACjDC,QAAS,CACP,eAAgB,CACd,OACA,CAAC,MAAO,SACR,UACA,GACA,UACA,GACA,UACA,GACA,UACA,IACA,UACA,IACA,WAEF,gBAAiB,CACf,OACA,CAAC,MAAO,SACR,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,IAEA,GAEA,IAEA,KAEF,YAAa,CACX,OACA,CAAC,MAAO,SACR,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,KAIJC,OAAQ,CACN,eAAgB,CACd,OACA,CAAC,MAAO,SACR,UACA,EACA,UACA,GACA,UACA,GACA,UACA,GACA,UACA,IACA,WAEF,gBAAiB,CACf,OACA,CAAC,MAAO,SACR,GAEA,EAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,IAEA,IAEF,YAAa,CACX,OACA,CAAC,MAAO,SACR,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,KAIJC,KAAM,CACJ,eAAgB,CACd,OACA,CAAC,MAAO,SACR,UACA,EACA,UACA,GACA,UACA,GACA,UACA,GACA,UACA,GACA,WAEF,gBAAiB,CACf,OACA,CAAC,MAAO,SACR,GAEA,EAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,GAEA,IAEF,YAAa,CACX,OACA,CAAC,MAAO,SACR,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,MC5KS,EACJ,mCADI,EAGX,+FCKJC,IAASC,YAAcC,EA6BvB,IA8LaC,EAAMxD,IAAMyD,MA9LK,SAAC,GAUxB,IATLC,EASI,EATJA,IACAC,EAQI,EARJA,IACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,kBACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,2BACAC,EACI,EADJA,SAEIC,EAAeC,iBAA6B,IAD5C,EAOAtB,EAAoB,WAHhBI,EAJJ,EAIFrB,KACSwC,EALP,EAKFjC,QACOkC,EANL,EAMFrD,MANE,EAYA6B,EAAoB,UAHhBK,EATJ,EASFtB,KACS0C,EAVP,EAUFnC,QACOoC,EAXL,EAWFvD,MAXE,EAiBA6B,EAAoB,QAHhBM,EAdJ,EAcFvB,KACS4C,EAfP,EAeFrC,QACOsC,EAhBL,EAgBFzD,MAEI0D,EAAaN,GAAkBE,GAAiBE,EAqItD,OAnIA7B,qBAAU,WACJ+B,GAAczB,GAAWC,GAAUC,GAAQW,GAAmB,WAChE,IAAMa,EAAM,IAAIvB,IAASG,IAAI,CAC3BqB,UAAWV,EAAaW,QACxBC,MAAO,sDACPC,OAAQ,CAACtB,EAAKC,GACdC,KAAMA,IAGFqB,EAAkB,CAAC,UAAW,SAAU,QAE9CL,EAAIM,GAAG,QAAQ,WACbD,EAAOE,SAAQ,SAACpC,GAAW,IAAD,IACxB6B,EAAIQ,UAAJ,UAAiBrC,EAAjB,UAAgC,CAC9BsC,KAAM,UACNxD,KACY,YAAVkB,EACIG,EACU,WAAVH,EACAI,EACAC,EACNkC,SAAS,EACTC,eAA0B,YAAVxC,EAAsB,EAAI,IAG5C6B,EAAIY,SAAS,CACXC,GAAI1C,EACJsC,KAAM,SACNK,OAAO,GAAD,OAAK3C,EAAL,UACN4C,MAAO,CACL,eAAgB1C,EAAmBF,GAAO,gBAC1C,gBAAiBE,EAAmBF,GAAO,iBAC3C,iBAAkB,MAItB6B,EAAIY,SAAS,CACXC,GAAG,GAAD,OAAK1C,EAAL,SACFsC,KAAM,SACNK,OAAO,GAAD,OAAK3C,EAAL,UACNxD,OAAQ,CACN,kBAAmB,CAAC,IAAK,EAAG,CAAC,MAAO,UACpC,aAAc,CACZ,SACA,CAAC,MAAOwD,GACR,CAAC,SAAU,KAAM,CAAC,MAAO,WAE3B,YAAa,CAAC,iBAAkB,yBAChC,YAAaE,EAAmBF,GAAO,cAEzC4C,MAAO,CACL,aAAc,aASlB,UAAA9B,EAAkBd,UAAlB,mBAA0B+B,eAA1B,SAAmCc,iBACjC,SAN+B,SAACC,GAChCC,EAAeb,GACfL,EAAImB,kBAAJ,UAAyBhD,GAAS,aAAc,WAChD6B,EAAImB,kBAAJ,UAAyBhD,EAAzB,SAAuC,aAAc,cAOvD6B,EAAIM,GAAG,QAAP,UAAmBnC,IAAS,SAAC8C,GAC3B,GAAIA,EAAEG,UAAYH,EAAEG,SAAS,GAAGC,WAAY,CAAC,IAAD,EACRJ,EAAEG,SAAS,GAAGC,WAAxC/C,EADkC,EAClCA,QAASC,EADyB,EACzBA,OAAQC,EADiB,EACjBA,KACzBa,EAA2B,CAAEf,UAASC,SAAQC,mBAKtDwB,EAAIM,GAAG,cAAc,WACnBgB,YAAW,WAAO,IAAD,IACf,UAAArC,EAAiB,cAAjB,mBAA6BiB,eAA7B,SAAsCqB,UACrC,QAGL,IAAK,IAAIC,EAAI,EAAGA,EAAItC,EAAiBuC,OAAQD,IAAK,CAChD,IAAIrC,IAAoBD,EAWtB,MAAMwC,QAAQrF,MAAM,sCAXqB,WAAD,MACpC0C,EAAM4C,WAAWxC,EAAiBqC,GAAGI,IAAIC,MAAM,KAAK,IACpD/C,EAAM6C,WAAWxC,EAAiBqC,GAAGI,IAAIC,MAAM,KAAK,IACxD,UAAA3C,EAAiBsC,GAAGtB,eAApB,SAA6Bc,iBAAiB,SAAS,WACrDhB,EAAI8B,MAAM,CACR1B,OAAQ,CAACtB,EAAKC,GACdC,KAAM,EACN+C,WAAW,OAP0B,GAe7C/B,EAAIM,GAAG,SAAS,SAACW,GACf7B,EAAe,CACbN,IAAKmC,EAAEe,OAAOlD,IACdC,IAAKkC,EAAEe,OAAOjD,IACdC,KAAMiD,SAASjC,EAAIkC,UAAUC,QAAQ,SAKzC,IAAMjB,EAAiB,SAACb,GACtBA,EAAOE,SAAQ,SAACpC,GACd6B,EAAImB,kBAAkBhD,EAAO,aAAc,QAC3C6B,EAAImB,kBAAJ,UAAyBhD,EAAzB,SAAuC,aAAc,YAazDmB,EAAS,CACP8C,YAXuB,SACvB9D,GAEA,IAAI8D,EAAc,EAIlB,OAHO,OAAP9D,QAAO,IAAPA,KAAS8C,SAASb,SAAQ,SAACU,GAAO,IAAD,EAC/BmB,GAAW,UAAInB,EAAEI,kBAAN,aAAI,EAAcgB,SAExBD,EAIME,CAAiBhE,GAC9BiE,eAAgBjE,EAAQ8C,SAASK,OACjCe,aAAcjE,EAAO6C,SAASK,OAC9BgB,YAAajE,EAAK4C,SAASK,OAC3BiB,gBACEvD,EAAiB,GAAGwD,OAAOxD,EAAiB,GAAGwD,OAAOlB,OAAS,GAC5DmB,OA9HyD,KAiIjE,CAAC7C,IACAL,GAAgBE,GAAeE,EAE/B,wBAAIK,MAAO,CAAEvF,MAAO,QAApB,qDAEE,6BAFF,0BAEgC,KAKlC,oCACE,yBACEiI,UAAU,eACV1C,MAAO,CACLtF,SAAU,WACViI,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,OAAQ,OACRC,MAAO,QAET5H,IAAK,SAAC6H,GACJ7D,EAAaW,QAAUkD,SAOM,kBAAM,KC/NhCC,EAA+B,CAC1CtE,IAAK,OACLD,KAAM,MACNE,KAAM,IAIKsE,EAAiB,WAIxB,IAAD,EACmCjG,mBAA6B,MADhE,mBACIkG,EADJ,KACiBnE,EADjB,OCL8B,WACjC,IAAMoE,EAAmBzF,sBAAW,sBAAC,kCAAAnB,EAAA,sEACJF,EAAuB,CACpDG,IAAK,yBACLC,OAAQ,CACN2G,OAAQ,UAJuB,uBACrBC,EADqB,EAC3BzG,KAD2B,SAOHP,EAAgC,CAC9DG,IAAI,0BAAD,OAA4B6G,EAAOC,IACtC7G,OAAQ,CAAE8G,WAAYjF,KATW,uBAOrBkF,EAPqB,EAO3B5G,KAP2B,kBAW5B4G,GAX4B,2CAYlC,IAEH,OAAO3G,EAA8BsG,GDPMM,GAAnC7G,EAHL,EAGKA,KAAMK,EAHX,EAGWA,SAAUE,EAHrB,EAGqBA,QAASnB,EAH9B,EAG8BA,MAajC,OAXA2B,qBAAU,WACR,IAAIV,GACAE,GAAWP,EAAM,CAAC,IACZ8G,EAAwB9G,EAAxB8G,SAAUC,EAAc/G,EAAd+G,UAClB5E,EACE2E,GAAYC,EACR,CAAEjF,IAAKgF,EAAUjF,IAAKkF,EAAWhF,KAAM,GACvCqE,MAGP,CAACpG,EAAMO,EAASnB,EAAOiB,IACnBjB,EACH,CAACmB,EAAS6F,EAAiBjE,GAC3B,CAAC5B,EAAS+F,EAAanE,IEPhB6E,EAAiB,SAC5BnH,EACAM,GAEA,IAAM8G,EAAgBnG,sBAAW,sBAAC,8BAAAnB,EAAA,sEACTF,EAAqB,CAC1CG,IAAK,4BACLC,WAH8B,uBACxBG,EADwB,EACxBA,KAIRyE,QAAQyC,IAAIlH,EAAM,YALc,kBAMzBA,GANyB,2CAO/B,QACDH,QADC,IACDA,OADC,EACDA,EAAQwB,QADP,OAEDxB,QAFC,IAEDA,OAFC,EAEDA,EAAQ0B,KAFP,OAGD1B,QAHC,IAGDA,OAHC,EAGDA,EAAQyB,OAHP,OAIDzB,QAJC,IAIDA,OAJC,EAIDA,EAAQsH,KAJP,OAKDtH,QALC,IAKDA,OALC,EAKDA,EAAQuH,OAEV,OAAOnH,EAAmBgH,EAAe9G,I,mCClC9BkH,EAAwBlJ,IAAMyD,MACzC,YAMO,IALLuD,EAKI,EALJA,YACAG,EAII,EAJJA,eACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,YACAC,EACI,EADJA,gBAiBA,OACE,oCACE,kBAACvH,EAAD,CACEoJ,SAAUC,OAAOA,OAAOC,WAAa,IAAM,MAAQ,QACnDC,WAAW,MACXC,EAAE,OAHJ,0BAK0B,IACxB,uBAAGC,KAAK,4BAA4BzE,MAAO,CAAEvF,MAAO,UAApD,gBAEK,IARP,YASW,kBAACiK,EAAA,EAAD,CAAMC,KAAK,QAAQlK,MAAM,SATpC,uCAYA,kBAACO,EAAD,CAAMoJ,SAAUC,OAAOA,OAAOC,WAAa,IAAM,MAAQ,OACvD,kBAACM,EAAA,EAAUC,MAAX,CACEC,UAAQ,EACRZ,KAAMG,OAAOA,OAAOC,WAAa,IAAM,OAAS,QAChDS,OAAO,SAEP,kBAAC,EAAD,CAAS/B,MAAM,OAAOgC,GAAG,QACvB,kBAACJ,EAAA,EAAD,CAAWnK,MAAM,OAAOqK,UAAQ,GAC9B,kBAACF,EAAA,EAAUK,MAAX,KACGhD,EADH,IACgB,kBAACyC,EAAA,EAAD,CAAMC,KAAK,gBAE3B,kBAACC,EAAA,EAAUM,MAAX,qBAEF,kBAACN,EAAA,EAAD,CAAWnK,MAAM,SAASqK,UAAQ,GAChC,kBAACF,EAAA,EAAUK,MAAX,KACE,kBAACjK,EAAD,KA5CK,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAmCkB8G,SAASS,EAAgBb,MAAM,KAAK,GAAGA,MAAM,KAAK,IAChD,GAEJ,IACDa,EAAgBb,MAAM,KAAK,GAAGA,MAAM,KAAK,GAP5C,IAQGa,EAAgBb,MAAM,KAAK,KAGhC,kBAACkD,EAAA,EAAUM,MAAX,6BAEE,kBAACR,EAAA,EAAD,CAAMC,KAAK,QAAQlK,MAAM,cAI/B,kBAACmK,EAAA,EAAD,CAAWnK,MAAM,MAAMqK,UAAQ,GAC7B,kBAACF,EAAA,EAAUK,MAAX,KAAkB7C,GAClB,kBAACwC,EAAA,EAAUM,MAAX,mBAGF,kBAACN,EAAA,EAAD,CAAWnK,MAAM,SAASqK,UAAQ,GAChC,kBAACF,EAAA,EAAUK,MAAX,KAAkB5C,GAClB,kBAACuC,EAAA,EAAUM,MAAX,iBAGF,kBAACN,EAAA,EAAD,CAAWnK,MAAM,OAAOqK,UAAQ,GAC9B,kBAACF,EAAA,EAAUK,MAAX,KAAkB3C,GAClB,kBAACsC,EAAA,EAAUM,MAAX,sB,2JClFP,IAAMC,EAA4C,SAAC,GAInD,IAHL5B,EAGI,EAHJA,OACAxE,EAEI,EAFJA,iBACG5D,EACC,6CACJ,OACE,kBAAC,EAAD,iBACMA,EADN,CAEEiK,cAAc,SACdC,GAAG,OACH5K,MAAM,QACNuI,MAAM,OACNsC,UAAU,SACVC,gBAAgB,uBAEfhC,EAAO1D,KAAI,SAACiB,EAAGO,GACd,OACE,kBAACrG,EAAD,CAAMwK,IAAKnE,GACF,IAANA,GAAW,kBAAC,EAAD,MACZ,kBAAC,EAAD,CAAYoE,OAAQ3E,GACjB/B,GACC,yBACE3D,IAAK,SAAC6H,GACJlE,EAAiBsC,GAAGtB,QAAUkD,IAGhC,kBAACyC,EAAA,EAAD,CAAQC,SAAS,OAAOlL,MAAM,OAAOqK,UAAQ,GAC3C,kBAACY,EAAA,EAAOE,QAAR,CAAgBC,QAAM,GAAEtC,EAAOlC,GAAGjD,QAClC,kBAACsH,EAAA,EAAOE,QAAR,CAAgBE,SAAO,GAAvB,iBAYdC,EAAqC,SAAC,GAA0B,IAAxBN,EAAuB,EAAvBA,OAAQnK,EAAe,EAAfA,SAE7CkI,EAUHiC,EAVFO,IACA7H,EASEsH,EATFtH,QACAC,EAQEqH,EARFrH,OACAC,EAOEoH,EAPFpH,KACAmE,EAMEiD,EANFjD,OACAyD,EAKER,EALFQ,SACA/D,EAIEuD,EAJFvD,MACAT,EAGEgE,EAHFhE,IACAyE,EAEET,EAFFS,IACAC,EACEV,EADFU,SAEIC,EAAgB5D,EAAOA,EAAOlB,OAAS,GAAGmB,KAC1C4D,EAAQD,EAAc1E,MAAM,KAAK,GACjC4E,EAAOF,EAAc1E,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC9Ce,EAAO2D,EAAc1E,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC9C6E,EAAQ,sCAAkCpI,EAAlC,iBACd,OACE,kBAAC,EAAD,CAASqI,eAAe,gBAAgBC,GAAG,MAAMC,aAAa,QAC5D,kBAAC,EAAD,CAAStB,cAAc,SAASuB,GAAG,OACjC,kBAAC,EAAD,CACEvC,SAAS,OACT3J,MAAM,OACN+L,eAAe,aACfnB,GAAG,QAEH,yBAAKuB,IAAKL,EAAUM,IAAK1I,IACzB,kBAAC2I,EAAD,KACE,kBAAC9L,EAAD,CAAMN,SAAS,WAAWiI,IAAI,OAAOE,KAAK,OACvC1E,KAKP,kBAAC,EAAD,CAAS1D,MAAM,OAAO2J,SAAS,OAAOoC,eAAe,iBACnD,kBAACxL,EAAD,CAAMqK,GAAG,QACP,kBAACyB,EAAD,cACQ,kBAAC9L,EAAD,KAAOwI,IAEf,kBAACsD,EAAD,gBACU,kBAAC9L,EAAD,KAAOoD,IAEjB,kBAAC0I,EAAD,cACQ,kBAAC9L,EAAD,KAAOqD,GAAa,MAI9B,kBAACrD,EAAD,CAAMqK,GAAG,QACP,kBAACyB,EAAD,sBACgB,kBAAC9L,EAAD,KAAOkH,GAAc,KAErC,kBAAC4E,EAAD,kBACY,kBAAC9L,EAAD,KAAOyG,IAEnB,kBAACqF,EAAD,mBAEE,kBAAC9L,EAAD,KAAOqL,EAAQ,IAAMC,EAAO,IAAM7D,EAAlC,aAGFnH,GACA,kBAACN,EAAD,CAAMqK,GAAG,QACNc,GACC,kBAACW,EAAD,mBACa,kBAAC9L,EAAD,KAAOmL,IAGrBD,GACC,kBAACY,EAAD,sBACgB,kBAAC9L,EAAD,KAAOkL,GAAY,KAGpCD,GACC,kBAACa,EAAD,kBACY,kBAAC9L,EAAD,KAAOiL,GAAiB,QAO7C3K,GAAY,kBAAC,EAAD,CAASyL,WAAW,YAAYzL,KAK7C0L,EAAO,WACX,OACE,wBACEhH,MAAO,CACLiH,OAAQ,OACRlE,OAAQ,QACRwC,gBAAiB,QACjBvC,MAAO,OACPL,IAAK,UAMPmE,EAAOvL,YAAOI,EAAPJ,CAAH,KClJG2L,EAA+B,SAAC,GAAkB,IAAhBtI,EAAe,EAAfA,IAAKD,EAAU,EAAVA,IAClD,OACE,kBAAC,EAAD,CACEwI,EAAE,OACFX,eAAe,aACf/L,MAAM,QACN2J,SAAUC,OAAOA,OAAOC,WAAa,IAAM,MAAQ,SAEnD,kBAACtJ,EAAD,CAAMwJ,EAAE,QAAR,SAAsB5F,GACtB,kBAAC5D,EAAD,CAAMwJ,EAAE,QAAR,SAAsB7F,KCEfyI,EAAoB,WAAO,IAAD,EACClK,mBACpC,oBAFmC,mBAC9BmK,EAD8B,KACjBC,EADiB,OAKyBpK,mBAE5D,MAPmC,mBAK9BqK,EAL8B,KAKLrI,EALK,OASXhC,mBAA4B,MATjB,mBAS9BsK,EAT8B,KASvBrI,EATuB,OAajC2E,EAAe,CACjBG,MAAM,EACNC,KAlB6B,IAcpBuD,EAX0B,EAWnCpK,QACM2B,EAZ6B,EAYnClC,KAZmC,EAiBwBgH,EAAe,eACvEyD,EADsE,CAEzEtD,MAAM,EACNC,KAtB8B,MAmBfwD,EAjBoB,EAiB7BrK,QAAoCsK,EAjBP,EAiBC7K,KAjBD,EAuBqBqG,IAvBrB,mBAuB9ByE,EAvB8B,KAuBVxE,EAvBU,KAuBGnE,EAvBH,KAwB/B4I,EAAqBxI,iBAA2B,MAChDyI,EAAoBzI,iBAA2B,MAC/C0I,EAAkB1I,iBAA2B,MAC7CP,EAAoB,CACxBX,QAAS0J,EACTzJ,OAAQ0J,EACRzJ,KAAM0J,GAOFhJ,EAAmB,CALNM,iBAA2B,MAC3BA,iBAA2B,MAC3BA,iBAA2B,MAC3BA,iBAA2B,MAC3BA,iBAA2B,OAgB9C,OARAxB,qBAAU,WACRyJ,EACEC,GAA2BS,OAAOxJ,KAAK+I,GAAyBjG,OAAS,EACrE,gBACA,sBAEL,CAACiG,IAECE,GAA2BG,GAAuBF,EASrD,kBAAC1M,EAAD,KACE,kBAACA,EAAD,CAAMQ,UAAQ,GACX4H,GACC,kBAAC,EAAD,CAAmBxE,IAAKwE,EAAYxE,IAAKD,IAAKyE,EAAYzE,OAI9D,kBAAC3D,EAAD,CACEQ,UAAQ,EACRmH,IAAI,MACJE,KAAMwB,OAAOA,OAAOC,WAAa,IAAM,OAAS,OAChDtB,MAAOqB,OAAOA,OAAOC,WAAa,IAAM,OAAS,QAEjD,kBAAC2D,EAAA,EAAD,CAASnD,UAAQ,GACf,kBAAC9J,EAAD,KACGwM,GAAS,kBAACrD,EAAUqD,GACrB,kBAACxM,EAAD,CAAMkN,WAAW,OAAO9D,SAAS,QAAQuC,GAAG,OAAOlM,MAAM,WACtC,qBAAhB4M,GAAsCE,EACrC,gBAEA,qCAC0B,OAAvBA,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBpJ,UACxB,kBAACnD,EAAD,kBAAiBuM,EAAwBpJ,UAEnB,OAAvBoJ,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBnJ,SACxB,kBAACpD,EAAD,iBAAgBuM,EAAwBnJ,SAElB,OAAvBmJ,QAAuB,IAAvBA,OAAA,EAAAA,EAAyBlJ,OACxB,kBAACrD,EAAD,eAAcuM,EAAwBlJ,QAK7CW,GACC,kBAAC,EAAD,CACE+D,OAAwB,qBAAhBsE,EAAqC,OAAS,MACtD9D,OAAQvE,EACRD,iBAAkBA,IAGL,kBAAhBsI,GAAmCM,GAClC,oCACE,kBAAC,EAAD,CAAiBpE,OAAQoE,EAAc5E,OAAO,SAC9C,kBAAC,EAAD,CAASyD,eAAe,WAAW2B,GAAG,QACpC,kBAACzC,EAAA,EAAD,CACEjL,MAAM,OACNuI,MAAM,OACNoF,QAAS,WACPd,EAAe,sBAJnB,gBAgBZ,kBAAC,EAAD,CACEH,EAAE,OACFX,eAAe,SACf9L,SAAS,WACTiI,IAAI,OACJ+D,aAAa,MACblL,UAAQ,GAER,kBAAC,EAAD,CAAmB6M,UAAWR,GAA9B,WAGA,kBAAC,EAAD,CAAmBQ,UAAWP,GAA9B,UAGA,kBAAC,EAAD,CAAmBO,UAAWN,GAA9B,SAED3E,GACC,kBAAC3E,EAAD,iBACM2E,EADN,CAEEnE,eAAgBA,EAChBH,kBAAmBA,EACnBC,iBAAkBA,EAClBC,iBAAkBA,EAClBE,2BAA4BA,EAC5BC,SAAUA,MA3Fd,kBAAC,EAAD,CAAS+E,KAAK,OAAOnI,QAAM,GAA3B,uBAkGAuM,EAED,SAAC,GAA6B,IAA3BD,EAA0B,EAA1BA,UAAW/M,EAAe,EAAfA,SACjB,OACE,kBAACN,EAAD,CAAMwJ,EAAE,OACN,yBACEpJ,IAAK,SAAC6H,GACJoF,EAAUtI,QAAUkD,IAGtB,kBAACyC,EAAA,EAAD,CAAQZ,UAAQ,EAACrK,MAAM,SACrB,kBAACO,EAAD,CAAMgI,MAAM,QAAQ1H,OC1KfiN,EAJH,WACV,OAAO,kBAAC,EAAD,OCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d735ccdb.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport css from \"@styled-system/css\";\nimport {\n  background,\n  BackgroundProps,\n  borders,\n  BordersProps,\n  color,\n  ColorProps,\n  flexbox,\n  FlexboxProps,\n  grid,\n  GridProps,\n  layout,\n  LayoutProps,\n  position,\n  PositionProps,\n  space,\n  SpaceProps,\n  typography,\n  TypographyProps,\n  boxShadow,\n  BoxShadowProps,\n} from \"styled-system\";\n\ntype StyledSystemProps = TypographyProps &\n  SpaceProps &\n  LayoutProps &\n  ColorProps &\n  PositionProps &\n  FlexboxProps &\n  GridProps &\n  BackgroundProps &\n  BordersProps &\n  BoxShadowProps;\n\nconst styledSystemProps = [\n  typography,\n  space,\n  layout,\n  color,\n  position,\n  flexbox,\n  grid,\n  background,\n  borders,\n  boxShadow,\n];\n\nexport type ViewProps = StyledSystemProps &\n  React.HtmlHTMLAttributes<HTMLDivElement> & { aboveMap?: boolean };\n\nexport const View = React.forwardRef(\n  (props: ViewProps, ref: React.Ref<HTMLElement>) => {\n    return <ViewRoot {...props}>{props.children}</ViewRoot>;\n  }\n);\n\nconst ViewRoot = styled(\"div\")<ViewProps>(\n  (props) =>\n    props.aboveMap ? css({ zIndex: \"1!important\", position: \"absolute\" }) : {},\n  styledSystemProps\n);\n\nexport const Flexbox: FC<ViewProps> = (props) => {\n  return (\n    <View display=\"flex\" {...props}>\n      {props.children}\n    </View>\n  );\n};\n","import React, { FC } from \"react\";\nimport { Dimmer, Loader, LoaderProps } from \"semantic-ui-react\";\n\nexport const Loading: FC<LoaderProps> = ({ children, ...props }) => {\n  return (\n    <Dimmer active>\n      <Loader {...props}>{children}</Loader>\n    </Dimmer>\n  );\n};\n","import axios from \"axios\";\nexport type RequestOption = {\n  url: string;\n  params?: any;\n};\n\nexport type Response<T> = {\n  data: T;\n  status: number;\n};\n\nconst handleError = (error: any) => {\n  if (!error.response || !error.response.status) {\n    return { message: \"no connection to the internet\", original: error };\n  }\n\n  let message = `something went wrong... please try agian`;\n\n  return {\n    message,\n    original: error,\n  };\n};\n\nexport const getRequest = async <Data>(\n  option: RequestOption\n): Promise<Response<Data>> => {\n  const { url, params } = option;\n  try {\n    const response = await axios.get<Data>(url, { params });\n    return { data: response.data, status: response.status };\n  } catch (error) {\n    throw handleError(error);\n  }\n};\n","import { useEffect, useState, useCallback } from \"react\";\nexport type FetchOption<Data> = {\n  onComplete?: (params: Data) => void;\n  onFailure?: (params: any) => void;\n  notImmediate?: boolean;\n};\nexport const useFetch = <Data>(\n  request: () => Promise<Data>,\n  options?: FetchOption<Data>\n) => {\n  const [fetching, setFetching] = useState<boolean>(false);\n  const [fetched, setFetched] = useState<boolean>(false);\n  const [data, setData] = useState<Data | null>(null);\n  const [error, setError] = useState<any | null>(null);\n  const onComplete = options?.onComplete;\n  const onFailure = options?.onFailure;\n\n  const doFetch = useCallback(async () => {\n    setError(null);\n    setData(null);\n    setFetching(true);\n    try {\n      const data = await request();\n      setData(data);\n      setFetched(true);\n      setFetching(false);\n      if (onComplete) onComplete(data);\n    } catch (error) {\n      setError(error);\n      setFetching(false);\n      if (onFailure) onFailure(error);\n    }\n  }, [onComplete, onFailure, request]);\n\n  useEffect(() => {\n    if (options && options.notImmediate) return;\n    doFetch();\n  }, [doFetch, options]);\n\n  return { fetching, fetched, doFetch, data, error };\n};\n","import { useCallback } from \"react\";\nimport { getRequest } from \"./request\";\nimport { useFetch, FetchOption } from \"../hooks/useFetch\";\nimport { FeatureCollection, Point, GeoJsonProperties } from \"geojson\";\n\nexport type GroupedDataResponse = FeatureCollection<Point, GeoJsonProperties>;\nexport type Group = \"country\" | \"region\" | \"city\";\nexport const useGroupedDataFetch = (\n  group: Group,\n  option?: FetchOption<FeatureCollection<Point, GeoJsonProperties>>\n) => {\n  const fetchGroupedData = useCallback(async () => {\n    const { data } = await getRequest<\n      FeatureCollection<Point, GeoJsonProperties>\n    >({\n      url: `http://localhost:5001/ip/${group}`,\n    });\n    return data;\n  }, [group]);\n  return useFetch<FeatureCollection<Point, GeoJsonProperties>>(\n    fetchGroupedData,\n    option\n  );\n};\n","import mapboxgl from \"mapbox-gl\";\nexport const groupToCircleStyle: CircleStyleType = {\n  country: {\n    \"circle-color\": [\n      \"step\",\n      [\"get\", \"count\"],\n      \"#c973ff\",\n      10,\n      \"#ffe11f\",\n      20,\n      \"#6edbd9\",\n      50,\n      \"#64ed32\",\n      100,\n      \"#f7f00f\",\n      200,\n      \"#ff5f03\",\n    ],\n    \"circle-radius\": [\n      \"step\",\n      [\"get\", \"count\"],\n      12,\n\n      10,\n\n      25,\n\n      20,\n\n      40,\n\n      50,\n\n      70,\n\n      100,\n\n      75,\n\n      200,\n\n      100,\n    ],\n    \"text-size\": [\n      \"step\",\n      [\"get\", \"count\"],\n      12,\n      10,\n      14,\n      20,\n      20,\n      50,\n      25,\n      100,\n      29,\n      200,\n      32,\n    ],\n  },\n\n  region: {\n    \"circle-color\": [\n      \"step\",\n      [\"get\", \"count\"],\n      \"#c973ff\",\n      5,\n      \"#ffe11f\",\n      10,\n      \"#6edbd9\",\n      30,\n      \"#e1ac55\",\n      50,\n      \"#f7f00f\",\n      100,\n      \"#ff5f03\",\n    ],\n    \"circle-radius\": [\n      \"step\",\n      [\"get\", \"count\"],\n      18,\n\n      5,\n\n      27,\n\n      10,\n\n      35,\n\n      30,\n\n      51,\n\n      50,\n\n      65,\n\n      100,\n\n      90,\n    ],\n    \"text-size\": [\n      \"step\",\n      [\"get\", \"count\"],\n      12,\n      5,\n      14,\n      10,\n      16,\n      30,\n      18,\n      50,\n      21,\n      100,\n      28,\n    ],\n  },\n\n  city: {\n    \"circle-color\": [\n      \"step\",\n      [\"get\", \"count\"],\n      \"#c973ff\",\n      5,\n      \"#ffe11f\",\n      20,\n      \"#6edbd9\",\n      30,\n      \"#e1ac55\",\n      40,\n      \"#f7f00f\",\n      80,\n      \"#ff5f03\",\n    ],\n    \"circle-radius\": [\n      \"step\",\n      [\"get\", \"count\"],\n      21,\n\n      5,\n\n      30,\n\n      20,\n\n      27,\n\n      30,\n\n      40,\n\n      40,\n\n      50,\n\n      80,\n\n      70,\n    ],\n    \"text-size\": [\n      \"step\",\n      [\"get\", \"count\"],\n      11,\n      5,\n      13,\n      20,\n      15,\n      30,\n      18,\n      40,\n      21,\n      80,\n      28,\n    ],\n  },\n};\ntype MapBoxStyling = {\n  \"circle-color\":\n    | string\n    | mapboxgl.StyleFunction\n    | mapboxgl.Expression\n    | undefined;\n  \"circle-radius\":\n    | number\n    | mapboxgl.StyleFunction\n    | mapboxgl.Expression\n    | undefined;\n  \"text-size\":\n    | number\n    | mapboxgl.StyleFunction\n    | mapboxgl.Expression\n    | undefined;\n};\ntype CircleStyleType = {\n  country: MapBoxStyling;\n  region: MapBoxStyling;\n  city: MapBoxStyling;\n};\n","export default {\n  ipstack: \"cbd66f0a2bbe228fb5712bb3464a6382\",\n  mapbox:\n    \"pk.eyJ1IjoidHJ1ZmZsZTIyIiwiYSI6ImNrYm5yYzF1bzFzcnUydXBmYzA0OHlqcDEifQ.ktwongYmNo0l--QTS3R7MQ\",\n};\n","import React, { FC, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport { Group, useGroupedDataFetch } from \"../apis/useGroupedDataFetch\";\nimport { IpInfo } from \"../apis/useIpInfoFetch\";\nimport { IpInfoFetchParams } from \"../apis/useIpInfoFetch\";\nimport { groupToCircleStyle } from \"../styles/mapBoxCircleStyles\";\nimport { FeatureCollection, Point, GeoJsonProperties } from \"geojson\";\nimport keys from \"../keys\";\nmapboxgl.accessToken = keys.mapbox;\n\nexport type MapBoxState = {\n  lng: number;\n  lat: number;\n  zoom: number;\n};\n\ntype Stats = {\n  totalVisits: number;\n  numOfCountries: number;\n  numOfRegions: number;\n  numOfCities: number;\n  lastVisitedTime: string;\n};\n\ntype MapProps = MapBoxState & {\n  groupToSwitchRefs: {\n    country: React.MutableRefObject<HTMLElement | null>;\n    region: React.MutableRefObject<HTMLElement | null>;\n    city: React.MutableRefObject<HTMLElement | null>;\n  };\n  mostRecentIpRefs: React.MutableRefObject<HTMLElement | null>[];\n  mostRecentIpInfo: IpInfo[] | null;\n  setMapBoxState: (params: MapBoxState) => void;\n  setClickedCircleFetchParam: (params: IpInfoFetchParams | null) => void;\n  setStats: (params: Stats | null) => void;\n};\n\nconst MapRoot: FC<MapProps> = ({\n  lng,\n  lat,\n  zoom,\n  groupToSwitchRefs,\n  mostRecentIpRefs,\n  mostRecentIpInfo,\n  setMapBoxState,\n  setClickedCircleFetchParam,\n  setStats,\n}) => {\n  let mapContainer = useRef<string | HTMLElement>(\"\");\n\n  const {\n    data: country,\n    fetched: countryFetched,\n    error: countryError,\n  } = useGroupedDataFetch(\"country\");\n  const {\n    data: region,\n    fetched: regionFetched,\n    error: regionError,\n  } = useGroupedDataFetch(\"region\");\n  const {\n    data: city,\n    fetched: cityFetched,\n    error: cityError,\n  } = useGroupedDataFetch(\"city\");\n  const allFetched = countryFetched && regionFetched && cityFetched;\n\n  useEffect(() => {\n    if (allFetched && country && region && city && mostRecentIpInfo) {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/truffle22/ckbntzq2q0elx1iqwqk9onysn\",\n        center: [lng, lat],\n        zoom: zoom,\n      });\n\n      const groups: Group[] = [\"country\", \"region\", \"city\"];\n\n      map.on(\"load\", () => {\n        groups.forEach((group) => {\n          map.addSource(`${group}Source`, {\n            type: \"geojson\",\n            data:\n              group === \"country\"\n                ? country\n                : group === \"region\"\n                ? region\n                : city,\n            cluster: true,\n            clusterMaxZoom: group === \"country\" ? 1 : 2,\n          });\n\n          map.addLayer({\n            id: group,\n            type: \"circle\",\n            source: `${group}Source`,\n            paint: {\n              \"circle-color\": groupToCircleStyle[group][\"circle-color\"],\n              \"circle-radius\": groupToCircleStyle[group][\"circle-radius\"],\n              \"circle-opacity\": 0.7,\n            },\n          });\n\n          map.addLayer({\n            id: `${group}Names`,\n            type: \"symbol\",\n            source: `${group}Source`,\n            layout: {\n              \"symbol-sort-key\": [\"-\", 0, [\"get\", \"count\"]],\n              \"text-field\": [\n                \"concat\",\n                [\"get\", group],\n                [\"concat\", \"\\n\", [\"get\", \"count\"]],\n              ],\n              \"text-font\": [\"Open Sans Bold\", \"Arial Unicode MS Bold\"],\n              \"text-size\": groupToCircleStyle[group][\"text-size\"],\n            },\n            paint: {\n              \"text-color\": \"#d0c9f0\",\n            },\n          });\n\n          const onSwitchGroupButtonClick = (e: any) => {\n            hideAllLayOuts(groups);\n            map.setLayoutProperty(`${group}`, \"visibility\", \"visible\");\n            map.setLayoutProperty(`${group}Names`, \"visibility\", \"visible\");\n          };\n          groupToSwitchRefs[group]?.current?.addEventListener(\n            \"click\",\n            onSwitchGroupButtonClick\n          );\n\n          map.on(\"click\", `${group}`, (e) => {\n            if (e.features && e.features[0].properties) {\n              const { country, region, city } = e.features[0].properties;\n              setClickedCircleFetchParam({ country, region, city });\n            }\n          });\n        });\n      });\n      map.on(\"style.load\", () => {\n        setTimeout(() => {\n          groupToSwitchRefs[\"region\"]?.current?.click();\n        }, 2000);\n      });\n      //associating mostRedcentIpInfo with its location for teh zoom feature\n      for (let i = 0; i < mostRecentIpRefs.length; i++) {\n        if (mostRecentIpInfo && mostRecentIpRefs) {\n          let lat = parseFloat(mostRecentIpInfo[i].loc.split(\",\")[0]);\n          let lng = parseFloat(mostRecentIpInfo[i].loc.split(\",\")[1]);\n          mostRecentIpRefs[i].current?.addEventListener(\"click\", () => {\n            map.flyTo({\n              center: [lng, lat],\n              zoom: 9,\n              essential: true,\n            });\n          });\n        } else {\n          throw console.error(\"unmatching numer of refs and data\");\n        }\n      }\n\n      map.on(\"click\", (e) => {\n        setMapBoxState({\n          lng: e.lngLat.lng,\n          lat: e.lngLat.lat,\n          zoom: parseInt(map.getZoom().toFixed(2)),\n        });\n      });\n\n      //helper functions\n      const hideAllLayOuts = (groups: Group[]) => {\n        groups.forEach((group) => {\n          map.setLayoutProperty(group, \"visibility\", \"none\");\n          map.setLayoutProperty(`${group}Names`, \"visibility\", \"none\");\n        });\n      };\n      const countTotalVisits = (\n        country: FeatureCollection<Point, GeoJsonProperties>\n      ) => {\n        let totalVisits = 0;\n        country?.features.forEach((e) => {\n          totalVisits += e.properties?.count;\n        });\n        return totalVisits;\n      };\n      //set state for the stats\n      setStats({\n        totalVisits: countTotalVisits(country),\n        numOfCountries: country.features.length,\n        numOfRegions: region.features.length,\n        numOfCities: city.features.length,\n        lastVisitedTime:\n          mostRecentIpInfo[0].visits[mostRecentIpInfo[0].visits.length - 1]\n            .time,\n      });\n    }\n  }, [allFetched]);\n  if (countryError || regionError || cityError) {\n    return (\n      <h1 style={{ color: \"red\" }}>\n        could not fetch visitors data from the database...\n        <br /> please try agian later{\" \"}\n      </h1>\n    );\n  }\n  return (\n    <>\n      <div\n        className=\"mapContainer\"\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          left: 0,\n          bottom: 0,\n          height: \"100%\",\n          width: \"100%\",\n        }}\n        ref={(el: HTMLDivElement) => {\n          mapContainer.current = el;\n        }}\n      />\n    </>\n  );\n};\n\nexport const Map = React.memo(MapRoot, () => true);\n","import { useState, useEffect } from \"react\";\nimport { useGeoLocationFetch } from \"../apis/useGeoLocationFetch\";\nimport { MapBoxState } from \"../components/map\";\n\nexport const defaultMapState: MapBoxState = {\n  lat: 51.543,\n  lng: -0.1478,\n  zoom: 10,\n};\n//location on the map. the inital location will be set to the user's geolocation\n//otherwise london\nexport const useMapBoxState = (): [\n  boolean,\n  MapBoxState | null,\n  (parmas: MapBoxState) => void\n] => {\n  const [mapBoxState, setMapBoxState] = useState<MapBoxState | null>(null);\n\n  const { data, fetching, fetched, error } = useGeoLocationFetch();\n\n  useEffect(() => {\n    if (fetching) return;\n    if (fetched && data) {\n      const { latitude, longitude } = data;\n      setMapBoxState(\n        latitude && longitude\n          ? { lat: latitude, lng: longitude, zoom: 3 }\n          : defaultMapState\n      );\n    }\n  }, [data, fetched, error, fetching]);\n  return error\n    ? [fetched, defaultMapState, setMapBoxState]\n    : [fetched, mapBoxState, setMapBoxState];\n};\n","import { useCallback } from \"react\";\nimport { getRequest } from \"./request\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport keys from \"../keys\";\ntype IpResponse = { ip: string };\ntype GeoLocationResponse = {\n  latitude: number;\n  longitude: number;\n  success?: boolean;\n};\nexport const useGeoLocationFetch = () => {\n  const fetchGeoLocation = useCallback(async () => {\n    const { data: ipData } = await getRequest<IpResponse>({\n      url: \"https://api.ipify.org/\",\n      params: {\n        format: \"json\",\n      },\n    });\n    const { data: geoData } = await getRequest<GeoLocationResponse>({\n      url: `http://api.ipstack.com/${ipData.ip}`,\n      params: { access_key: keys.ipstack },\n    });\n    return geoData;\n  }, []);\n\n  return useFetch<GeoLocationResponse>(fetchGeoLocation);\n};\n","import { useCallback } from \"react\";\nimport { getRequest } from \"./request\";\nimport { useFetch, FetchOption } from \"../hooks/useFetch\";\ntype Visit = {\n  time: string;\n};\nexport type IpInfo = {\n  _id: string;\n  country: string;\n  region: string;\n  city: string;\n  loc: string;\n  visits: Visit[];\n  firstVisitTime?: string;\n  hostname?: string;\n  org?: string;\n  timezone?: string;\n  count?: number;\n};\nexport type IpInfoFetchParams = {\n  country?: string;\n  region?: string;\n  city?: string;\n  sort?: boolean;\n  size?: number;\n} | null;\nexport const useIpInfoFetch = (\n  params: IpInfoFetchParams,\n  options?: FetchOption<IpInfo[]>\n) => {\n  const fetchedIpInfo = useCallback(async () => {\n    const { data } = await getRequest<IpInfo[]>({\n      url: \"http://localhost:5001/ip/\",\n      params,\n    });\n    console.log(data, \"fetched!\");\n    return data;\n  }, [\n    params?.country,\n    params?.city,\n    params?.region,\n    params?.sort,\n    params?.size,\n  ]);\n  return useFetch<IpInfo[]>(fetchedIpInfo, options);\n};\n","import React, { FC } from \"react\";\nimport { View, Flexbox } from \"./view\";\nimport { Icon, Statistic } from \"semantic-ui-react\";\nexport type StatsProps = {\n  totalVisits: number;\n  numOfCountries: number;\n  numOfRegions: number;\n  numOfCities: number;\n  lastVisitedTime: string;\n};\nexport const Stats: FC<StatsProps> = React.memo(\n  ({\n    totalVisits,\n    numOfCountries,\n    numOfRegions,\n    numOfCities,\n    lastVisitedTime,\n  }) => {\n    const monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n\n    return (\n      <>\n        <View\n          fontSize={window.window.outerWidth < 730 ? \"3vw\" : \"1.8vw\"}\n          lineHeight=\"1.1\"\n          m=\"4px\"\n        >\n          This web-app visualizes{\" \"}\n          <a href=\"http://www.leo-ryuta.work\" style={{ color: \"green\" }}>\n            my website's\n          </a>{\" \"}\n          traffic. <Icon name=\"react\" color=\"blue\" /> Click the circle for more\n          details!\n        </View>\n        <View fontSize={window.window.outerWidth < 730 ? \"2vw\" : \"1vw\"}>\n          <Statistic.Group\n            inverted\n            size={window.window.outerWidth < 730 ? \"mini\" : \"small\"}\n            widths=\"three\"\n          >\n            <Flexbox width=\"100%\" mt=\"20px\">\n              <Statistic color=\"teal\" inverted>\n                <Statistic.Value>\n                  {totalVisits} <Icon name=\"chart line\" />\n                </Statistic.Value>\n                <Statistic.Label>totalVisits</Statistic.Label>\n              </Statistic>\n              <Statistic color=\"purple\" inverted>\n                <Statistic.Value>\n                  <View>\n                    {\n                      monthNames[\n                        parseInt(lastVisitedTime.split(\"(\")[0].split(\"/\")[1]) -\n                          1\n                      ]\n                    }{\" \"}\n                    {lastVisitedTime.split(\"(\")[0].split(\"/\")[2]},\n                    {lastVisitedTime.split(\")\")[1]}\n                  </View>\n                </Statistic.Value>\n                <Statistic.Label>\n                  last visit time (GMT)\n                  <Icon name=\"globe\" color=\"purple\" />\n                </Statistic.Label>\n              </Statistic>\n            </Flexbox>\n            <Statistic color=\"red\" inverted>\n              <Statistic.Value>{numOfCountries}</Statistic.Value>\n              <Statistic.Label>Countries</Statistic.Label>\n            </Statistic>\n\n            <Statistic color=\"orange\" inverted>\n              <Statistic.Value>{numOfRegions}</Statistic.Value>\n              <Statistic.Label>Regions</Statistic.Label>\n            </Statistic>\n\n            <Statistic color=\"pink\" inverted>\n              <Statistic.Value>{numOfCities}</Statistic.Value>\n              <Statistic.Label>Cities</Statistic.Label>\n            </Statistic>\n          </Statistic.Group>\n        </View>\n      </>\n    );\n  }\n);\n","import React, { FC } from \"react\";\nimport { View, Flexbox, ViewProps } from \"./view\";\nimport { IpInfo } from \"../apis/useIpInfoFetch\";\nimport { Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\ntype IpInfoContainerProps = ViewProps & {\n  ipData: IpInfo[];\n  mostRecentIpRefs?: React.MutableRefObject<HTMLElement | null>[];\n};\nexport const IpInfoContainer: FC<IpInfoContainerProps> = ({\n  ipData,\n  mostRecentIpRefs,\n  ...props\n}) => {\n  return (\n    <Flexbox\n      {...props}\n      flexDirection=\"column\"\n      px=\"10px\"\n      color=\"white\"\n      width=\"100%\"\n      overflowY=\"scroll\"\n      backgroundColor=\"rgba(0, 0, 0, 0.6)\"\n    >\n      {ipData.map((e, i) => {\n        return (\n          <View key={i}>\n            {i !== 0 && <Line />}\n            <IpInfoItem ipinfo={e}>\n              {mostRecentIpRefs && (\n                <div\n                  ref={(el) => {\n                    mostRecentIpRefs[i].current = el;\n                  }}\n                >\n                  <Button animated=\"fade\" color=\"grey\" inverted>\n                    <Button.Content hidden>{ipData[i].region}</Button.Content>\n                    <Button.Content visible>zoom</Button.Content>\n                  </Button>\n                </div>\n              )}\n            </IpInfoItem>\n          </View>\n        );\n      })}\n    </Flexbox>\n  );\n};\n\nconst IpInfoItem: FC<{ ipinfo: IpInfo }> = ({ ipinfo, children }) => {\n  const {\n    _id: ip,\n    country,\n    region,\n    city,\n    visits,\n    hostname,\n    count,\n    loc,\n    org,\n    timezone,\n  } = ipinfo;\n  const lastVisitTime = visits[visits.length - 1].time;\n  const month = lastVisitTime.split(\"/\")[1];\n  const date = lastVisitTime.split(\"/\")[2].split(\"(\")[0];\n  const time = lastVisitTime.split(\"/\")[2].split(\")\")[1];\n  const imageUrl = `https://www.countryflags.io/${country}/shiny/64.png`;\n  return (\n    <Flexbox justifyContent=\"space-between\" py=\"2px\" marginBottom=\"20px\">\n      <Flexbox flexDirection=\"column\" my=\"2px\">\n        <Flexbox\n          fontSize=\"15px\"\n          color=\"pink\"\n          justifyContent=\"flex-start\"\n          px=\"10px\"\n        >\n          <img src={imageUrl} alt={country}></img>\n          <Elem>\n            <View position=\"relative\" top=\"32px\" left=\"5px\">\n              {country}\n            </View>\n          </Elem>\n        </Flexbox>\n\n        <Flexbox color=\"grey\" fontSize=\"12px\" justifyContent=\"flext-between\">\n          <View px=\"10px\">\n            <Elem>\n              IPv4: <View>{ip}</View>\n            </Elem>\n            <Elem>\n              Region: <View>{region}</View>\n            </Elem>\n            <Elem>\n              City: <View>{city}</View>{\" \"}\n            </Elem>\n          </View>\n\n          <View px=\"10px\">\n            <Elem>\n              Total visits: <View>{count}</View>{\" \"}\n            </Elem>\n            <Elem>\n              Location: <View>{loc}</View>\n            </Elem>\n            <Elem>\n              Last visit:\n              <View>{month + \"/\" + date + \",\" + time} (GMT)</View>\n            </Elem>\n          </View>\n          {!children && (\n            <View px=\"10px\">\n              {timezone && (\n                <Elem>\n                  Time zone: <View>{timezone}</View>\n                </Elem>\n              )}\n              {org && (\n                <Elem>\n                  Organization: <View>{org}</View>{\" \"}\n                </Elem>\n              )}\n              {hostname && (\n                <Elem>\n                  Hostname: <View>{hostname}</View>{\" \"}\n                </Elem>\n              )}\n            </View>\n          )}\n        </Flexbox>\n      </Flexbox>\n      {children && <Flexbox alignItems=\"flex-end\">{children}</Flexbox>}\n    </Flexbox>\n  );\n};\n\nconst Line = () => {\n  return (\n    <hr\n      style={{\n        border: \"none\",\n        height: \"2.5px\",\n        backgroundColor: \"white\",\n        width: \"110%\",\n        top: \"27%\",\n      }}\n    ></hr>\n  );\n};\n\nconst Elem = styled(Flexbox)`\n  color: white;\n  div {\n    color: #c3dfe8;\n    margin-left: 4px;\n  }\n`;\n","import React, { FC } from \"react\";\nimport { Flexbox, View } from \"./view\";\ntype Props = { lat: number; lng: number };\nexport const LocationContainer: FC<Props> = ({ lat, lng }) => {\n  return (\n    <Flexbox\n      p=\"10px\"\n      justifyContent=\"flex-start\"\n      color=\"white\"\n      fontSize={window.window.outerWidth < 730 ? \"3vw\" : \"1.7vw\"}\n    >\n      <View m=\"10px\">lat : {lat}</View>\n      <View m=\"10px\">lng : {lng}</View>\n    </Flexbox>\n  );\n};\n","import React, { FC, useRef, useState, useEffect } from \"react\";\nimport { View, Flexbox } from \"./components/view\";\nimport { Loading } from \"./components/loading\";\nimport { Map } from \"./components/map\";\nimport { useMapBoxState } from \"./hooks/useMapBoxState\";\nimport { useIpInfoFetch, IpInfoFetchParams } from \"./apis/useIpInfoFetch\";\nimport { Button, Segment } from \"semantic-ui-react\";\nimport { StatsProps, Stats } from \"./components/stats\";\nimport { IpInfoContainer } from \"./components/ipinfoContainer\";\nimport { LocationContainer } from \"./components/locationContainer\";\n\nconst RECENT_VISITS_FETCH_SIZE = 5;\nconst CLICKED_CIRCLE_FETCH_SIZE = 10;\nexport type DisplayMode = \"MostRecentVisits\" | \"ClickedCircle\";\nexport const Dashboard: FC<{}> = () => {\n  const [displayMode, setDisplayMode] = useState<DisplayMode>(\n    \"MostRecentVisits\"\n  );\n\n  const [clickedCircleFetchParam, setClickedCircleFetchParam] = useState<\n    IpInfoFetchParams\n  >(null);\n\n  const [stats, setStats] = useState<StatsProps | null>(null);\n  const {\n    fetched: fetchedMostRecntIpInfo,\n    data: mostRecentIpInfo,\n  } = useIpInfoFetch({\n    sort: true,\n    size: RECENT_VISITS_FETCH_SIZE,\n  });\n  const { fetched: fetchedCircleIpInfo, data: circleIpInfo } = useIpInfoFetch({\n    ...clickedCircleFetchParam,\n    sort: true,\n    size: CLICKED_CIRCLE_FETCH_SIZE,\n  });\n\n  const [fetchedMapBoxState, mapBoxState, setMapBoxState] = useMapBoxState();\n  const switchToCountryRef = useRef<HTMLElement | null>(null);\n  const switchToRegionRef = useRef<HTMLElement | null>(null);\n  const switchToCityRef = useRef<HTMLElement | null>(null);\n  const groupToSwitchRefs = {\n    country: switchToCountryRef,\n    region: switchToRegionRef,\n    city: switchToCityRef,\n  };\n  const recentRef1 = useRef<HTMLElement | null>(null);\n  const recentRef2 = useRef<HTMLElement | null>(null);\n  const recentRef3 = useRef<HTMLElement | null>(null);\n  const recentRef4 = useRef<HTMLElement | null>(null);\n  const recentRef5 = useRef<HTMLElement | null>(null);\n  const mostRecentIpRefs = [\n    recentRef1,\n    recentRef2,\n    recentRef3,\n    recentRef4,\n    recentRef5,\n  ];\n  useEffect(() => {\n    setDisplayMode(\n      clickedCircleFetchParam && Object.keys(clickedCircleFetchParam).length > 0\n        ? \"ClickedCircle\"\n        : \"MostRecentVisits\"\n    );\n  }, [clickedCircleFetchParam]);\n\n  if (!fetchedMostRecntIpInfo || !fetchedMapBoxState || !fetchedCircleIpInfo) {\n    return (\n      <Loading size=\"huge\" active>\n        Loading the map...\n      </Loading>\n    );\n  }\n\n  return (\n    <View>\n      <View aboveMap>\n        {mapBoxState && (\n          <LocationContainer lat={mapBoxState.lat} lng={mapBoxState.lng} />\n        )}\n      </View>\n\n      <View\n        aboveMap\n        top=\"6vh\"\n        left={window.window.outerWidth < 730 ? \"47vw\" : \"56vw\"}\n        width={window.window.outerWidth < 730 ? \"50vw\" : \"40vw\"}\n      >\n        <Segment inverted>\n          <View>\n            {stats && <Stats {...stats} />}\n            <View fontWeight=\"1000\" fontSize=\"1.7vw\" my=\"10px\" color=\"#cbccc0\">\n              {displayMode === \"MostRecentVisits\" && clickedCircleFetchParam ? (\n                \"Recent Visits\"\n              ) : (\n                <>\n                  {clickedCircleFetchParam?.country && (\n                    <View>Country : {clickedCircleFetchParam.country}</View>\n                  )}\n                  {clickedCircleFetchParam?.region && (\n                    <View>Region : {clickedCircleFetchParam.region}</View>\n                  )}\n                  {clickedCircleFetchParam?.city && (\n                    <View>City : {clickedCircleFetchParam.city}</View>\n                  )}\n                </>\n              )}\n            </View>\n            {mostRecentIpInfo && (\n              <IpInfoContainer\n                height={displayMode === \"MostRecentVisits\" ? \"37vh\" : \"0vh\"}\n                ipData={mostRecentIpInfo}\n                mostRecentIpRefs={mostRecentIpRefs}\n              />\n            )}\n            {displayMode === \"ClickedCircle\" && circleIpInfo && (\n              <>\n                <IpInfoContainer ipData={circleIpInfo} height=\"37vh\" />\n                <Flexbox justifyContent=\"flex-end\" pt=\"10px\">\n                  <Button\n                    color=\"grey\"\n                    width=\"21px\"\n                    onClick={() => {\n                      setDisplayMode(\"MostRecentVisits\");\n                    }}\n                  >\n                    Go back\n                  </Button>\n                </Flexbox>\n              </>\n            )}\n          </View>\n        </Segment>\n      </View>\n\n      <Flexbox\n        p=\"10px\"\n        justifyContent=\"center\"\n        position=\"relative\"\n        top=\"90vh\"\n        marginBottom=\"3vh\"\n        aboveMap\n      >\n        <SwitchGroupButton switchRef={switchToCountryRef}>\n          Country\n        </SwitchGroupButton>\n        <SwitchGroupButton switchRef={switchToRegionRef}>\n          Region\n        </SwitchGroupButton>\n        <SwitchGroupButton switchRef={switchToCityRef}>City</SwitchGroupButton>\n      </Flexbox>\n      {mapBoxState && (\n        <Map\n          {...mapBoxState}\n          setMapBoxState={setMapBoxState}\n          groupToSwitchRefs={groupToSwitchRefs}\n          mostRecentIpRefs={mostRecentIpRefs}\n          mostRecentIpInfo={mostRecentIpInfo}\n          setClickedCircleFetchParam={setClickedCircleFetchParam}\n          setStats={setStats}\n        />\n      )}\n    </View>\n  );\n};\n\nconst SwitchGroupButton: FC<{\n  switchRef: React.MutableRefObject<HTMLElement | null>;\n}> = ({ switchRef, children }) => {\n  return (\n    <View m=\"6px\">\n      <div\n        ref={(el) => {\n          switchRef.current = el;\n        }}\n      >\n        <Button inverted color=\"olive\">\n          <View width=\"64px\">{children}</View>\n        </Button>\n      </div>\n    </View>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Dashboard } from \"./dashboard\";\n\nconst App = () => {\n  return <Dashboard />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}